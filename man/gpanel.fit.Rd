% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gpanel.R
\name{gpanel.fit}
\alias{fillin}
\alias{gpanel.band}
\alias{gpanel.fit}
\alias{gpanel.labels}
\alias{panel.fit}
\title{Panel functions for predicted values and SE bands}
\usage{
gpanel.fit(x, y, fit, lower, upper, subscripts, ..., type, group.number, alpha,
  col, col.line, col.symbol, border = F, font, fontface)

panel.fit(x, y, fit, lower, upper, subscripts, ..., type, group.number, alpha,
  col, col.line, col.symbol, border = F, font, fontface)

gpanel.band(x, y, fit, lower, upper, subscripts, ..., type, group.number, alpha,
  col, col.line, col.symbol, border = F, font, fontface)

gpanel.labels(x, y, labels, subscripts, ...)

fillin(data, form, n = 200, xpd = 1)
}
\arguments{
\item{y}{}

\item{fit}{fitted values of a model, generally passed through 'layer' from a call to 'xyplot': e.g. \code{xyplot( y ~ x, data, groups = g, fit = data$yhat, lower = with(data, yhat - 2*se), upper = with(data, yhat + 2*se), subscripts = T)}}

\item{lower,upper}{}

\item{subscripts}{}

\item{group.number}{}

\item{alpha}{}

\item{col}{}

\item{col.symbol}{is used to control color when using 'groups'}

\item{border}{default = FALSE for panel.band.}

\item{font}{}

\item{fontface}{}

\item{labels}{to display}

\item{data}{data frame to be used to add additional values of numeric variable}

\item{form}{formula evaluated in data. The first term defines the variable with values to be filled in and the remaining terms define the variables to be used for grouping determining the minima and maxima within which values are added.}

\item{n}{the number of values to be added between the global mininum and maximum.
Values falling outside conditional minima and maxima are culled. Default 200.}

\item{xpd}{expansion factor to add points beyond minima and maxima. Default 1.0.}

\item{dots}{}

\item{data}{data frame with values of x that need filling in}

\item{n}{number of additional points over range of predictor (default 200)}

\item{form}{formula idenfying variable x to fill in and grouping variables, g1, g2, etc.
using syntax: \code{~ x + g1 + g2} (the variable to fill in comes first)}

\item{xpd}{expansion beyond range of predictor (default 1.0, i.e. no expansion)}
}
\value{
The 'panel.bands', 'panel.fit', and 'panel.labels' functions are
        invoked for their graphical effect.
}
\description{
Panel functions for predicted values and SE bands using 'layer' and 'glayer' in the package latticeExtra

gpanel.labels: shows all labels, for selected labels see the examples with
\code{\link{trellis.focus}} and \code{\link{panel.identify}}:
     trellis.focus()
     panel.identify(labels = rownames(data),rot=-15,col = col.symbol, etc.)
     trellis.unfocus()
}
\details{
With 'layer' and 'glayer' in 'latticeExtra', these functions can be used to easily generate fitted values and
confidence or prediction bands that have a reasonable appearance whether a plot uses 'groups' or not.
}
\section{Functions}{
\itemize{
\item \code{panel.fit}: to be used with 'layer' -- but, actually, identical to 'glayer'

\item \code{gpanel.band}: identical to gpanel.fit but kept for backward compatibility

\item \code{gpanel.labels}: 

\item \code{fillin}: 
}}
\examples{
\dontrun{
  library(spida)
  library(spidanew)
  library(latticeExtra)
  library(car)

  fit <- lm(prestige ~ (income + I(income^2)) * type, Prestige,
      na.action = na.exclude)
  pred <- cbind(Prestige, predict(fit, newdata = Prestige, se = TRUE))
  head(pred)
  (p <- xyplot( prestige ~ income , pred,  groups = type,
                subscripts = T,
                fit = pred$fit,
                lower = with(pred, fit - 2*se.fit),
                upper = with(pred, fit + 2*se.fit)))
  p + glayer(gpanel.fit(...))

  ###
  ### Use 'fillin' to add points in sparse regions of the predictor
  ### to produce smoother bands
  ###

  fit <- lm( income ~
        (education+I(education^2)+I(education^3) +I(education^4))* type,
        Prestige, na.action = na.exclude)    # overfitting!
  # adding extra values of predictor to get smooth line
  Prestige$occupation <- rownames(Prestige)
  z <- fillin(Prestige, ~education + type, xpd = 1.1)

  dim(z)
  dim(Prestige)
  z <- cbind(z, predict(fit, newdata = z, se = TRUE))
  head(z)
  gd(3,cex=2,lwd=2, alpha = .7)
  (p <-  xyplot( income ~ education, z, groups = type,
                 subscripts = T,
                 fit = z$fit,
                 lower = z$fit - z$se,
                 upper = z$fit + z$se,
                 auto.key = list(space='right', lines= T)))
  p + glayer( gpanel.fit(...))
  p + glayer( gpanel.fit(...,  alpha = .1))
  # Using spida:gd() to get a ggplot-like appearance
  gd(3,lty=1,lwd=2)
  p + glayer( gpanel.fit(...,alpha = .1))

  ###
  ###  Using gpanel.fit with no groups
  ###

  (p <-  xyplot( income ~ education| type, z,
                 subscripts = T,
                 fit = z$fit,
                 lower = z$fit - z$se,
                 upper = z$fit + z$se,
                 auto.key = list(space='right', lines= T)))
  p + layer( gpanel.fit(...))

  # gd_(basecol = 'tomato4')  # Use 'gd_' to set parameters without groups
  gd_(base = 'tomato4')  # Use 'gd_' to set parameters without groups
  p + layer( gpanel.fit(...,  col = 'grey10'))

  ###
  ### With panels and groups
  ###

  z <- Prestige
  z$gender <- with(z, cut( women, c(-1,15,50,101),labels = c("Male","Mixed","Female")))
  tab(z, ~ gender + type)
  z <- fillin( z, ~ education + type + gender, xpd = 1.1)
  fit <- lm( income ~ (education+I(education^2)+I(education^3) )* type * gender,
             z, na.action = na.exclude)    # overfitting!
  summary(fit)
  z <- cbind( z, predict(fit, newdata = z, se = TRUE))
  head(z)
  (p <-  xyplot( income ~ education| gender, z, groups = type,
                 subscripts = T,
                 fit = z$fit,
                 lower = z$fit - z$se,
                 upper = z$fit + z$se,
                 layout = c(1,3),
                 auto.key = list(space='right', lines= T, cex = 1.5)))

  p + glayer(gpanel.fit(...))
  trellis.focus()
  panel.identify(labels= z$occupation)
  trellis.unfocus()
  z$type2 <- with( z, reorder(type,education, mean, na.rm=T))
  gd(3)
  (p <-  xyplot( income ~ education| type2, z, groups = gender,
                 subscripts = T,
                 fit = z$fit,
                 lower = z$fit - z$se,
                 upper = z$fit + z$se,
                 layout = c(1,3),
                 par.strip.text = list(cex = 2),
                 auto.key = list(space='right', lines= T, cex = 1.5)))

  p + glayer( gpanel.fit(...))
  trellis.focus()
  panel.identify(labels= z$occupation)
  trellis.unfocus()

  ###
  ### With panels^2
  ### need to remove 'col = col.line'
  ###

  z <- Prestige
  z$occ <- rownames(Prestige)
  z$gender <- with(z, cut( women, c(-1,15,50,101),labels = c("Male","Mixed","Female")))
  z$type2 <- with( z, reorder(type,education, mean, na.rm=T))
  tab(z, ~ gender + type2)
  z <- fillin( z, ~ education + type + gender, xpd = 1.1)
  fit <- lm( income ~ (education+I(education^2)+I(education^3) )* type * gender,
             z, na.action = na.exclude)    # overfitting!
  summary(fit)
  z <- cbind( z, predict(fit, newdata = z, se = TRUE))
  head(z)
  (p <-  xyplot( income ~ education| gender*type, z,
                 subscripts = T,
                 fit = z$fit,
                 labels = z$occ,
                 lower = z$fit - z$se,
                 upper = z$fit + z$se,
                 auto.key = list(space='right', lines= T, cex = 1.5)))

  p + layer( gpanel.fit(...))
  p + layer( gpanel.fit(..., col = 'black', alpha = .1)) + layer(gpanel.text(...))
}
}
\author{
Georges Monette <georges@yorku.ca>
}

